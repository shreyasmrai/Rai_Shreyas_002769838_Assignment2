/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import static java.util.Date.parse;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.VehicleList;
import model.Vehicle;

/**
 *
 * @author harshaljaiswal
 */
public final class ViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewPanel
     */
    VehicleList vehicleList;

    public ViewPanel(VehicleList vehicleList) {
        initComponents();
        this.vehicleList = vehicleList;
        
        DisplayVehicle();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbVehicles = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUnavil = new javax.swing.JButton();
        btnMarkAvaliable = new javax.swing.JButton();
        labAvaliable = new javax.swing.JLabel();
        labUnavaliable = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtMakeFilter = new javax.swing.JTextField();
        btnFilterYear = new javax.swing.JButton();
        txtFilterYear = new javax.swing.JTextField();
        btnFindSerialNo = new javax.swing.JButton();
        btnFilterModel = new javax.swing.JButton();
        txtSerialNo = new javax.swing.JTextField();
        txtFitlerModel = new javax.swing.JTextField();
        btnFilterCity = new javax.swing.JButton();
        txtFilterCity = new javax.swing.JTextField();
        btnListManuf = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabManuf = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnExpMaint = new javax.swing.JButton();
        btnExpMaint1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtMinSeat = new javax.swing.JTextField();
        txtMaxSeat = new javax.swing.JTextField();
        btnAvilCar = new javax.swing.JButton();
        labFirstAvilCar = new javax.swing.JLabel();

        tbVehicles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Make", "Model", "Year of Manuf.", "Max Seats", "Serial No.", "Maintainance Date", "City", "UpdateTime", "Licence Plate", "Avaliable"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbVehicles);

        btnView.setText("Update");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUnavil.setText("Mark Unavaliable (Book)");
        btnUnavil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnavilActionPerformed(evt);
            }
        });

        btnMarkAvaliable.setText("Mark Avaliable");
        btnMarkAvaliable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarkAvaliableActionPerformed(evt);
            }
        });

        jButton1.setText("Filter by Make");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtMakeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMakeFilterActionPerformed(evt);
            }
        });

        btnFilterYear.setText("Filter by Year");
        btnFilterYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterYearActionPerformed(evt);
            }
        });

        txtFilterYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterYearActionPerformed(evt);
            }
        });

        btnFindSerialNo.setText("Find by Serial No.");
        btnFindSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindSerialNoActionPerformed(evt);
            }
        });

        btnFilterModel.setText("Filter by Model");
        btnFilterModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterModelActionPerformed(evt);
            }
        });

        txtSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNoActionPerformed(evt);
            }
        });

        txtFitlerModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFitlerModelActionPerformed(evt);
            }
        });

        btnFilterCity.setText("Filter by City");
        btnFilterCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterCityActionPerformed(evt);
            }
        });

        txtFilterCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterCityActionPerformed(evt);
            }
        });

        btnListManuf.setText("List all car manuf.");
        btnListManuf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListManufActionPerformed(evt);
            }
        });

        tabManuf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Mafufacturers"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabManuf);

        jLabel2.setText("Last Updated time:");

        btnExpMaint.setText("Expired Maintenance cars");
        btnExpMaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpMaintActionPerformed(evt);
            }
        });

        btnExpMaint1.setText("search car with seats");
        btnExpMaint1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpMaint1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Min");

        jLabel9.setText("Max");

        txtMinSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinSeatActionPerformed(evt);
            }
        });

        txtMaxSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxSeatActionPerformed(evt);
            }
        });

        btnAvilCar.setText("Find First Avaliable Car");
        btnAvilCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvilCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(142, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(449, 449, 449)
                        .addComponent(labAvaliable, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(labUnavaliable, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnFilterYear, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFilterCity, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnListManuf, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtMakeFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                        .addComponent(txtFilterYear)
                                        .addComponent(txtFilterCity))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnFindSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtSerialNo)
                                        .addGap(6, 6, 6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnFilterModel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtFitlerModel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnExpMaint)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnExpMaint1)
                                                .addGap(28, 28, 28)
                                                .addComponent(jLabel3)
                                                .addGap(3, 3, 3)
                                                .addComponent(txtMinSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMaxSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(btnAvilCar, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(379, 379, 379)
                                .addComponent(labFirstAvilCar, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMarkAvaliable, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(btnUnavil)
                .addGap(18, 18, 18)
                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnDelete)
                    .addComponent(btnUnavil)
                    .addComponent(btnMarkAvaliable)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labUnavaliable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labAvaliable, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(txtMakeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindSerialNo)
                    .addComponent(txtSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilterYear)
                    .addComponent(txtFilterYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilterModel)
                    .addComponent(txtFitlerModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFilterCity)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFilterCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExpMaint)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnListManuf))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(txtMinSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExpMaint1))
                        .addGap(39, 39, 39)
                        .addComponent(btnAvilCar)
                        .addGap(18, 18, 18)
                        .addComponent(labFirstAvilCar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbVehicles.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tbVehicles.getModel();
        vehicleList.deleteByLicencePlate(model.getValueAt(selectedRow, 8).toString());
        DisplayVehicle();
        JOptionPane.showMessageDialog(this, "Record Deleted!");
        long lastTime = System.currentTimeMillis();
        Date dateTime = new Date(lastTime);
        jLabel2.setText("Last Updated time:" + dateTime);

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUnavilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnavilActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbVehicles.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbVehicles.getModel();

        if (selectedRow < 0 || model.getValueAt(selectedRow, 9).equals(false)) {
            JOptionPane.showMessageDialog(this, "Please Select a proper row to mark Unavaliable.");
            return;
        }

        vehicleList.markUnaviable(model.getValueAt(selectedRow, 8).toString());
        DisplayVehicle();
        JOptionPane.showMessageDialog(this, "Vehicle marked as Unavaliable!");

    }//GEN-LAST:event_btnUnavilActionPerformed

    private void btnMarkAvaliableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkAvaliableActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbVehicles.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbVehicles.getModel();

        if (selectedRow < 0 || model.getValueAt(selectedRow, 9).equals(true)) {
            JOptionPane.showMessageDialog(this, "Please Select a proper row to mark Unavaliable.");
            return;
        }

        vehicleList.markAvaliable(model.getValueAt(selectedRow, 8).toString());
        DisplayVehicle();
        JOptionPane.showMessageDialog(this, "Vehicle marked as Avaliable!");
    }//GEN-LAST:event_btnMarkAvaliableActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ArrayList<Vehicle> list = vehicleList.filterByMade(txtMakeFilter.getText());
        DisplayVehicle(list);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtMakeFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMakeFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMakeFilterActionPerformed

    private void btnFilterYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterYearActionPerformed
        // TODO add your handling code here:
        ArrayList<Vehicle> list = vehicleList.filterByManufYear(Integer.valueOf(txtFilterYear.getText()));
        DisplayVehicle(list);
    }//GEN-LAST:event_btnFilterYearActionPerformed

    private void txtFilterYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterYearActionPerformed

    private void btnFindSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindSerialNoActionPerformed
        // TODO add your handling code here:
        if (txtSerialNo.getText().length() != 10) {
            JOptionPane.showMessageDialog(this, "Enter proper 10 digit Serial Number");
            return;
        }

        ArrayList<Vehicle> list = vehicleList.filterBySerialNo(txtSerialNo.getText());
        DisplayVehicle(list);

    }//GEN-LAST:event_btnFindSerialNoActionPerformed

    private void btnFilterModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterModelActionPerformed
        // TODO add your handling code here:
        ArrayList<Vehicle> list = vehicleList.filterByModel(txtFitlerModel.getText());
        DisplayVehicle(list);
    }//GEN-LAST:event_btnFilterModelActionPerformed

    private void txtSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNoActionPerformed

    private void txtFitlerModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFitlerModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFitlerModelActionPerformed

    private void btnFilterCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterCityActionPerformed
        // TODO add your handling code here:
        ArrayList<Vehicle> list = vehicleList.filterByCity(txtFilterCity.getText());
        DisplayVehicle(list);
    }//GEN-LAST:event_btnFilterCityActionPerformed

    private void txtFilterCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterCityActionPerformed

    private void btnListManufActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListManufActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tab = (DefaultTableModel) tabManuf.getModel();
        tab.setRowCount(0);
        ArrayList<String> list = vehicleList.getManuf();

        for (String v : list) {

            Object[] row = new Object[10];
            row[0] = v;
            tab.addRow(row);
        }

    }//GEN-LAST:event_btnListManufActionPerformed

    private void btnExpMaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpMaintActionPerformed
        // TODO add your handling code here:
        ArrayList<Vehicle> list = vehicleList.expiredMaintainance();
        DisplayVehicle(list);
    }//GEN-LAST:event_btnExpMaintActionPerformed

    private void btnExpMaint1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpMaint1ActionPerformed
        // TODO add your handling code here:
        int min = Integer.parseInt(txtMinSeat.getText());
        int max = Integer.parseInt(txtMaxSeat.getText());

        ArrayList<Vehicle> list = vehicleList.getMinMaxSeats(min, max);
        DisplayVehicle(list);
    }//GEN-LAST:event_btnExpMaint1ActionPerformed

    private void txtMinSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinSeatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinSeatActionPerformed

    private void txtMaxSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxSeatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxSeatActionPerformed

    private void btnAvilCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvilCarActionPerformed
        // TODO add your handling code here:
        ArrayList<Vehicle> list = vehicleList.getFirstAvaliableCar();
        DisplayVehicle(list);
        labFirstAvilCar.setText(list.get(0).getModel() + " " + list.get(0).getLicencePlate());
    }//GEN-LAST:event_btnAvilCarActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:

        int selectedRow = tbVehicles.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a row to update.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tbVehicles.getModel();
        Object[] row = null;
        row = new Object[10];
        for (int j = 0; j < model.getColumnCount(); j++) {
            row[j] = model.getValueAt(selectedRow, j);

        }

        DateFormat dateFormat = new SimpleDateFormat(
                "EEE MMM dd HH:mm:ss zzz yyyy", Locale.US);

        SimpleDateFormat f = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
        long milliseconds = 0;

        try {
            dateFormat.format(new Date());
            dateFormat.parse(row[7].toString());

            Date d = f.parse(row[7].toString());
            milliseconds = d.getTime();

        } catch (ParseException ex) {
            Logger.getLogger(ViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        vehicleList.deleteByLicencePlate(row[8].toString());

        vehicleList.addVehicle(row[0].toString(),
                row[1].toString(),
                Integer.parseInt(row[2].toString()),
                Integer.parseInt(row[3].toString()),
                row[4].toString(),
                row[6].toString(),
                row[5].toString(),
                System.currentTimeMillis(),
                Boolean.getBoolean(row[9].toString()),
                row[8].toString());

        DisplayVehicle();
        JOptionPane.showMessageDialog(this, "Record Updated!");
        long lastTime = System.currentTimeMillis();
        Date dateTime = new Date(lastTime);
        jLabel2.setText("Last Updated time:" + dateTime);

    }//GEN-LAST:event_btnViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvilCar;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExpMaint;
    private javax.swing.JButton btnExpMaint1;
    private javax.swing.JButton btnFilterCity;
    private javax.swing.JButton btnFilterModel;
    private javax.swing.JButton btnFilterYear;
    private javax.swing.JButton btnFindSerialNo;
    private javax.swing.JButton btnListManuf;
    private javax.swing.JButton btnMarkAvaliable;
    private javax.swing.JButton btnUnavil;
    private javax.swing.JButton btnView;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labAvaliable;
    private javax.swing.JLabel labFirstAvilCar;
    private javax.swing.JLabel labUnavaliable;
    private javax.swing.JTable tabManuf;
    private javax.swing.JTable tbVehicles;
    private javax.swing.JTextField txtFilterCity;
    private javax.swing.JTextField txtFilterYear;
    private javax.swing.JTextField txtFitlerModel;
    private javax.swing.JTextField txtMakeFilter;
    private javax.swing.JTextField txtMaxSeat;
    private javax.swing.JTextField txtMinSeat;
    private javax.swing.JTextField txtSerialNo;
    // End of variables declaration//GEN-END:variables

    private void DisplayVehicle(ArrayList<Vehicle> list) {
        DefaultTableModel model = (DefaultTableModel) tbVehicles.getModel();
        int avail = 0, unavil = 0;
        model.setRowCount(0);
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");

        for (Vehicle v : list) {

            Date date = new Date(System.currentTimeMillis());

            if (v.isIsAvaliable()) {
                avail++;
            } else {
                unavil++;
            }

            Object[] row = new Object[10];
            row[0] = v.getMake();
            row[1] = v.getModel();
            row[2] = v.getYearOfMan();
            row[3] = v.getMaxSeats();
            row[4] = v.getSerialNo();
            row[5] = v.getMaintenanceDate();
            row[6] = v.getCity();
            row[7] = date.toString();
            row[8] = v.getLicencePlate();
            row[9] = v.isIsAvaliable();

            model.addRow(row);
        }

        //last time fleet catlog was updated.
        long time = vehicleList.getLastUpdateTime();
        Date dateTime = new Date(time);
        jLabel2.setText("Last Updated time:" + dateTime.toString());

        //Update avaliable and unavaliable cars
        labAvaliable.setText("Avaliable (" + avail + ")");
        labUnavaliable.setText("Unavaliable (" + unavil + ")");
    }

    private void DisplayVehicle() {
        DefaultTableModel model = (DefaultTableModel) tbVehicles.getModel();
        int avail = 0, unavil = 0;
        model.setRowCount(0);
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");

        for (Vehicle v : vehicleList.getVehicleList()) {

            Date date = new Date(v.getUpdateTime());

            if (v.isIsAvaliable()) {
                avail++;
            } else {
                unavil++;
            }

            Object[] row = new Object[10];
            row[0] = v.getMake();
            row[1] = v.getModel();
            row[2] = v.getYearOfMan();
            row[3] = v.getMaxSeats();
            row[4] = v.getSerialNo();
            row[5] = v.getMaintenanceDate();
            row[6] = v.getCity();
            row[7] = date.toString();
            row[8] = v.getLicencePlate();
            row[9] = v.isIsAvaliable();

            model.addRow(row);
        }

        //last time fleet catlog was updated.
        long time = vehicleList.getLastUpdateTime();
        Date dateTime = new Date(time);
        jLabel2.setText("Last Updated time:" + dateTime.toString());

        //Update avaliable and unavaliable cars
        labAvaliable.setText("Avaliable (" + avail + ")");
        labUnavaliable.setText("Unavaliable (" + unavil + ")");
    }
}
